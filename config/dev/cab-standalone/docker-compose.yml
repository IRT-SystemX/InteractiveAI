version: '3.5'
services:
  cabcontext:
    container_name: cab_context
    image: cab/cabcontext
    build:
      context: ../../../backend
      dockerfile: Context-Service-Dockerfile
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db_postgres_context:5432/cab-context
      - FLASK_APP=app:create_app('dev')
      - PYTHONPATH=/code
      - FLASK_ENV=development
      - URL_INTROSPECT=http://frontend:80/auth/check_token
      - KEYCLOAK_SERVER_URL=http://frontend:80/auth/
      - OPFAB_CLIENT_SECRET=opfab-keycloak-secret
      - TZ=UTC   # Set timezone to UTC

    restart: unless-stopped
    command: sh -c "./entrypoint.sh"
    ports:
      - 5100:5000
    volumes:
      - ../../../backend/context-service:/code
    depends_on:
      - db_postgres_context

  cabevent:
    container_name: cab_event
    image: cab/cabevent
    build:
      context: ../../../backend
      dockerfile: Event-Service-Dockerfile
    restart: unless-stopped
    environment:
      - CARDS_PUBLICATION_SERVICE=http://cards-publication:8080
      - GATEWAY_SERVICE=http://frontend:80
      - HISTORIC_SERVICE=http://cabhistoric:5000
      - DATABASE_URL=postgresql://postgres:postgres@db_postgres_event:5432/cab-event
      - FLASK_APP=app:create_app('dev')
      - PYTHONPATH=/code
      - FLASK_ENV=development
      - URL_INTROSPECT=http://frontend:80/auth/check_token
      - KEYCLOAK_SERVER_URL=http://frontend:80/auth/
      - OPFAB_CLIENT_SECRET=opfab-keycloak-secret
      - TZ=UTC   # Set timezone to UTC
    command: sh -c "./entrypoint.sh"
    ports:
    # avoid port conflict under macOS
      - 5001:5000
    volumes:
      - ../../../backend/event-service:/code
    depends_on:
      - db_postgres_event

  cabhistoric:
    container_name: cabhistoric
    image: cab/cabhistoric
    build:
      context: ../../../backend
      dockerfile: Historic-Service-Dockerfile
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db_postgres_historic:5432/cab-historic
      - FLASK_APP=app:create_app('dev')
      - FLASK_ENV=development
      - PYTHONPATH=/my_app
      - URL_INTROSPECT=http://frontend:80/auth/check_token
      - KEYCLOAK_SERVER_URL=http://frontend:80/auth/
      - OPFAB_CLIENT_SECRET=opfab-keycloak-secret
      - TZ=UTC   # Set timezone to UTC
    restart: unless-stopped
    command: sh -c "./entrypoint.sh"
    ports:
      - 5200:5000
    volumes:
      - ../../../backend/historic-service:/code
    depends_on:
      - db_postgres_historic

  db_postgres_context:
    container_name: db_postgres_context
    image: postgres:14.7
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=cab-context
    ports:
      - '5434:5432'
    volumes:
      - postgres_context_data:/var/lib/postgresql/data/

  db_postgres_event:
    container_name: db_postgres_event
    image: postgres:14.7
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=cab-event
    ports:
      - '5436:5432'
    volumes:
      - postgres_event_data:/var/lib/postgresql/data/

  db_postgres_historic:
    container_name: db_postgres_historic
    image: postgres:14.7
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=cab-historic
    ports:
      - '5433:5432'
    volumes:
      - postgres_historic_data:/var/lib/postgresql/data/

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      TZ: UTC   # Set timezone to UTC
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - '${PGADMIN_PORT:-5050}:80'
    restart: unless-stopped

  frontend:
    container_name: frontend
    build:
      context: ../../../frontend
      dockerfile: Dockerfile
      args:
        VITE_RTE_SIMU: ${VITE_RTE_SIMU}
    restart: unless-stopped
    environment:
      - VITE_RTE_SIMU=${VITE_RTE_SIMU}
    volumes:
      - './ui-config:/usr/share/nginx/html/opfab'
      - './nginx-cors-permissive.conf:/etc/nginx/conf.d/default.conf'
    ports:
      - '3200:80'
    depends_on:
#      - cabcorrelation
      - cabrecommendation
      - cabevent
      - cabcontext
      - cabhistoric
      - users
      - businessconfig
      - cards-consultation
# Commented out - dockerfile missing!
#  cabcorrelation:
#    container_name: cab_correlation
#    image: cab/cabcorrelation
#    build:
#      context: ../../../backend
#      dockerfile: Correlation-Service-Dockerfile
#    restart: unless-stopped
#    environment:
#      - CARDS_PUBLICATION_SERVICE=http://cards-publication:8080
#      - GATEWAY_SERVICE=http://frontend:80
#      - HISTORIC_SERVICE=http://cabhistoric:5000
#      - DATABASE_URL=postgresql://postgres:postgres@db_postgres_correlation:5432/cab-correlation
#      - PYTHONPATH=/code
#      - FLASK_APP=app:create_app('dev', scheduler=True)
#      # - FLASK_ENV=development
#      - URL_INTROSPECT="http://frontend:80/auth/check_token"
#      - KEYCLOAK_SERVER_URL="http://frontend:80/auth/"
#      - CONTEXT_URL=http://cabcontext:5000
#      - EVENT_URL=http://cabevent:5000
#      - CAB_USERNAME=publisher_test
#      - CAB_PASSWORD=test
#      - AUTH_DISABLED=True
#      - DEFAULT_USE_CASE=ORANGE
#      - TZ=UTC   # Set timezone to UTC
#
#    command: sh -c "./entrypoint.sh"
#    ports:
#      - 5300:5000
#    volumes:
#      - ./../../../backend/correlation-service:/code
#    depends_on:
#      - db_postgres_correlation
#      - cabevent
#      - cabcontext
#
#  db_postgres_correlation:
#    container_name: db_postgres_correlation
#    image: postgres:14.7
#    environment:
#      - POSTGRES_HOST_AUTH_METHOD=trust
#      - POSTGRES_USER=postgres
#      - POSTGRES_PASSWORD=postgres
#      - POSTGRES_DB=cab-correlation
#    ports:
#      - '5435:5432'
#    volumes:
#      - postgres_correlation_data:/var/lib/postgresql/data/

  cabrecommendation:
    container_name: cab_recommendation
    image: cab/cabrecommendation
    build:
      context: ../../../backend
      dockerfile: Recommendation-Service-Dockerfile
    restart: unless-stopped
    environment:
      - GATEWAY_SERVICE=http://frontend:80
      - DATABASE_URL=postgresql://postgres:postgres@db_postgres_recommendation:5432/cab-recommendation
      - FLASK_APP=app:create_app('dev')
      - PYTHONPATH=/my_app
      - FLASK_ENV=development
      - URL_INTROSPECT=http://frontend:80/auth/check_token
      - KEYCLOAK_SERVER_URL=http://frontend:80/auth/
      - OPFAB_CLIENT_SECRET=opfab-keycloak-secret
      - TZ=UTC   # Set timezone to UTC
    command: sh -c "./entrypoint.sh"
    ports:
      - 5400:5000
    volumes:
      - ./../../../backend/recommendation-service:/my_app
    depends_on:
      - db_postgres_recommendation

  db_postgres_recommendation:
    container_name: db_postgres_recommendation
    image: postgres:14.7
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=cab-recommendation
    ports:
      - '5437:5432'
    volumes:
      - postgres_recommendation_data:/var/lib/postgresql/data/

  cabcapitalization:
    container_name: cab_capitalization
    image: cab/cabcapitalization
    build:
      context: ../../../backend
      dockerfile: Capitalization-Service-Dockerfile
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db_postgres_capitalization:5432/cab-capitalization
      - FLASK_APP=app:create_app('dev')
      - FLASK_ENV=development
      - PYTHONPATH=/my_app
      - URL_INTROSPECT=http://frontend:80/auth/check_token
      - KEYCLOAK_SERVER_URL=http://frontend:80/auth/
      - OPFAB_CLIENT_SECRET=opfab-keycloak-secret
      - TZ=UTC   # Set timezone to UTC
    restart: unless-stopped
    command: sh -c "./entrypoint.sh"
    ports:
      - 5500:5000
    volumes:
      - ../../../backend/capitalization-service:/code
    depends_on:
      - db_postgres_capitalization

  db_postgres_capitalization:
    container_name: db_postgres_capitalization
    image: postgres:14.7
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=cab-capitalization
    ports:
      - '5438:5432'
    volumes:
      - postgres_capitalization_data:/var/lib/postgresql/data/

  mongodb:
    image: mongo:4.4.4-bionic
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
  rabbitmq:
    container_name: rabbit
    image: rabbitmq:3-management
    hostname: rabbit



  #  If you want to persist queue after rabbit docker container removal mount
  #  a volume to store persistance data
  #  WARNING : On Kubernetes , as pod are destroy , it is
  #  necessary to persist queue . Otherwise in case of restart of
  #  the rabbit pod, the connection with cards-consultation will be lost
  #
  #    volumes:
  #      - "./rabbit-persistance:/var/lib/rabbitmq/mnesia/"

  #    Port closed for security reasons , be careful if you open it
  #    ports:
  #      - "5672:5672"
  #      - "15672:15672"
  keycloak:
    image: quay.io/keycloak/keycloak:16.1.1
    command: -Dkeycloak.migration.action=import -Dkeycloak.migration.provider=dir -Dkeycloak.migration.dir=/cab-keycloak/export -Dkeycloak.profile.feature.upload_scripts=enabled
    environment:
      - KEYCLOAK_USER=admin
      - KEYCLOAK_PASSWORD=admin
      - DB_VENDOR=H2
    volumes:
      - ../cab-keycloak:/cab-keycloak
    ports:
      - '89:8080'
  #    Debug port closed for security reasons, be careful if you open it
  #    - "90:9990"
  users:
    container_name: users
    image: 'lfeoperatorfabric/of-users-service:3.11.0.RELEASE'
    depends_on:
      - mongodb
      - rabbitmq
    user: ${USER_ID}:${USER_GID}
    ports:
      - '2103:8080'
    #    Debug port closed for security reasons, be careful if you open it
    #     - "4103:5005"
    environment:
      - SPRING_PROFILES_ACTIVE
      - TZ=UTC   # Set timezone to UTC
    volumes:
      - '../certificates:/certificates_to_add'
      - './users-docker.yml:/config/application.yml'
      - './common-docker.yml:/config/common-docker.yml'
      - ${CONFIG_PATH}:/external-config
  businessconfig:
    container_name: businessconfig
    image: 'lfeoperatorfabric/of-businessconfig-service:3.11.0.RELEASE'
    depends_on:
      - mongodb
    user: ${USER_ID}:${USER_GID}
    ports:
      - '2100:8080'
    #    Debug port closed for security reasons, be careful if you open it
    #     - "4100:5005"
    environment:
      - SPRING_PROFILES_ACTIVE
      - TZ=UTC   # Set timezone to UTC
    volumes:
      - '../certificates:/certificates_to_add'
      - './businessconfig-storage:/businessconfig-storage'
      - './common-docker.yml:/config/common-docker.yml'
      - './businessconfig-docker.yml:/config/application-docker.yml'
      - ${CONFIG_PATH}:/external-config
  cards-publication:
    container_name: cards-publication
    image: 'lfeoperatorfabric/of-cards-publication-service:3.11.0.RELEASE'
    depends_on:
      - mongodb
      - rabbitmq
    user: ${USER_ID}:${USER_GID}
    ports:
      - '2102:8080'
    #    Debug port closed for security reasons, be careful if you open it
    #     - "4102:5005"
    environment:
      - SPRING_PROFILES_ACTIVE
      - TZ=UTC   # Set timezone to UTC
    volumes:
      - '../certificates:/certificates_to_add'
      - './common-docker.yml:/config/common-docker.yml'
      - './cards-publication-docker.yml:/config/application-docker.yml'
      - ${CONFIG_PATH}:/external-config
  cards-consultation:
    container_name: cards-consultation
    image: 'lfeoperatorfabric/of-cards-consultation-service:3.11.0.RELEASE'
    depends_on:
      - mongodb
      - rabbitmq
    user: ${USER_ID}:${USER_GID}
    ports:
      - '2104:8080'
    #    Debug port closed for security reasons, be careful if you open it
    #     - "4104:5005"
    environment:
      - SPRING_PROFILES_ACTIVE
      - TZ=UTC   # Set timezone to UTC
    volumes:
      - '../certificates:/certificates_to_add'
      - './common-docker.yml:/config/common-docker.yml'
      - './cards-consultation-docker.yml:/config/application-docker.yml'
      - ${CONFIG_PATH}:/external-config
  # Uncomment this part if you want to add fronent opfab
  web-ui:
    container_name: web-ui
    image: 'lfeoperatorfabric/of-web-ui:3.11.0.RELEASE'
    # Needed for macOS ARM
    platform: linux/x86_64
    ports:
      - '2002:80'
    depends_on:
      - users
      - businessconfig
      - cards-consultation
    volumes:
      - './ui-config:/usr/share/nginx/html/opfab'
      - './nginx-cors-permissive.conf:/etc/nginx/conf.d/default.conf'

volumes:
  postgres_context_data:
  postgres_event_data:
  postgres_historic_data:
  postgres_recommendation_data:
  postgres_capitalization_data:
  pgadmin:
